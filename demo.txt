my controller 
const IUXLogger = require('iux-core-node').IUXLogger;
const IUXException = require('iux-core-node').IUXException;
const IUXResponse = require('iux-core-node').IUXResponse;
const reference = require('iux-core-node').Reference;
const myService = require('../services/myService');
const _ = require('lodash');

class myCont {

    hello (req,res,next){
        IUXLogger.info("Logging from inside of HELLO function");
        return new Promise(
            function(resolve , reject){
            myService.sayHello().then(
                function (HelloResponse){
                     resolve(HelloResponse);
                     //next(HelloResponse);
                }
            ).catch((e)=>{
                reject(e);
            });
           next();
        });
        //next();
    }

    getyourName (req,res,next){
        IUXLogger.info("Logging from inside of GET_YOUR_NAME function");
        return new promise ((fulfill, reject)=>{
            let name = req.params.name;
            if(name == null || _.isEmpty(name))
            {
                IUXLogger.error(`NAME is null or blank`);
                err = new IUXException.ErrorEntry(400,message);
                reject(err);
            }
            myService.getName(name).then(
                (fullname)=>{
                    fulfill(fullname);
                }
            ).catch((e)=>{
                reject(e);
            });
            next();
        });
    }

    getyourName2 (req,res){
        IUXLogger.info ("Logginf from inside of GET_YOUR_NAME_2 function");
        let name = req.params.name;
        myService.getName2(name)
            .then((records) => {
                res.send(IUXResponse(records));
            })
            .catch((err) => {
                if (!err.caught) {
                    IUXLogger.error('myController: error in getyourname function ' + err);
                    new IUXException.TechnicalError(500, err, name);
                }
            });
    }

    getmyData (req,res){
        IUXLogger.info("Logging from inside of GET_MY_DATA function");
        let name = req.params.name;
        myService.getmyData(name).then(
            (record)=>{
                res.send(IUXResponse(record));
            }
        ).catch((err) => {
            if (!err.caught) {
                IUXLogger.error('myController: error in getyourname function ' + err);
                new IUXException.TechnicalError(500, err, name);
            }
        });
    }
}
module.exports = new myCont;


//myservice
const IUXLogger = require('iux-core-node').IUXLogger;
const co = require('co');
const IUXException = require('iux-core-node').IUXException;
const IUXResponse = require('iux-core-node').IUXResponse;
const reference = require('iux-core-node').Reference;
const dateFormat = require('node-datetime');
const util = require('util');
const oracleUtil = require('iux-node-oracle');
const _ = require('lodash');

class myServo {
    getName (inputName) {
        return new Promise ((resolve , reject)=>{
            let name = {"first": " ","last" : "upadhyay"}
            name.first = inputName;
            resolve(name);
        });
    }

    getName2 (inputName){
        return new Promise ((resolve,reject)=>{
            let name = {"first": " ","last" : "singh"}
            name.first = inputName;
            resolve(name);
        });
    }

    sayHello(){
        IUXLogger.info("inside service of hello")
        return new Promise((resolve, reject) => {
            IUXLogger.info ("inside hello service");
            var hello = "Hello you have HIT the service. Thank you!!";
            resolve (hello);
        });
    }

    getmyData (inputName){
        return new Promise ((resolve, reject)=>{
            var info = {name, email,phone};
            info.name = inputName;
            info.email = "abc@trav.com";
            info.phone = "1234556";
            resolve (info);
        })
    }

}

module.exports = new myServo;

//responsehandler
/**
 * Created by Devesh on 12/2/2017.
 */
const {IUXResponse, EnvProvider, IUXLogger} = require('iux-core-node');
class ResponseHandler {
    static sendResponse(req, res) {
       // res.send(res);
        res.send(IUXResponse(res.body));
    }
}
module.exports = ResponseHandler;


//index
'use strict';

var express = require('express');
var router = express.Router();
const IUXLogger = require('iux-core-node').IUXLogger;
const myController = require('../controllers/myController');
const ResponseHandler = require('../controllers/response-handler');

router.get('/service/hello', myController.hello,ResponseHandler.sendResponse);
// router.get('/service/yourName:name', myController.getyourName,ResponseHandler.sendResponse);
// router.get('/service/getData:name',myController.getmyData);
// router.get ('/service/yourName2:name',myController.getyourName2)

module.exports = router;
